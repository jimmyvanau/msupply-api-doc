openapi: 3.0.0
info:
  version: '1.0.0'
  title: mSupply

  # termsOfService: 'https://example.com/terms/' # [Optional] Replace with an URL to your ToS
  contact:
    email: support@msupply.org.nz # [Optional] Replace with your contact email
    url: 'https://docs.msupply.org.nz' # [Optional] Replace with link to your contact form
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://apis.guru/openapi-template/logo.png'
  
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    # Introduction
    This documents the mSupply mobile and sync APIs using the OpenAPI specification.

    # OpenAPI Specification
    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities of the service without access to source
    code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can 
    understand and interact with the remote service with a minimal amount of implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.
externalDocs:
  description: Find out more about mSupply.
  url: 'https://docs.msupply.org.nz'

# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Mobile
    description: Mobile web interface operations
  - name: Sync
    description: Sync/offline/high latency connection operations
servers:
  - url: 'http://msupplyexample.com/mobile'

paths:
  #'/{type}/{resource}/{resource_id}':
  # '/items/':
    # parameters:
      # - name: item_id
        # in: path
        # description: Pretty print response
        # schema:
          # type: integer
    
    # tags:
          # - Mobile
          
    # get:
        # summary: Get all items
  
        # tags:
          # - Mobile
        
        # description: |
            # Retrieve all items          
          
        
        # operationId: getAllItems
          
        # security:
          # - basic_auth:
              # - 'read:users'
        
        # responses: # list of responses
            # '200':
              # description: Success
              # content:
                # application/json:
                  # example:
                    # id: 5242
                    # code: PAR500TAB1000
                    # item_name: Paracetamol 500mg tablet 1000
                    # stock_on_hand_tot: 281
                    
                
  
  '/items/{item_id}':
    parameters:
      - name: item_id
        in: path
        description: Pretty print response
        schema:
          type: integer
      
    get:
      summary: Get items by id
    
      tags:
        - Mobile
    
      description: |
        Retrieve items based on item_id
      
      operationId: getItemById
      
      security:
        - basic_auth:
            - 'read:users'
            
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json:
              #schema:
              #  $ref: '#/components/schemas/User'
              example:
                department: ABX
                category: Antibiotics
                category2: Penicillins
                stock_on_hand: 7328
                stock_available: 7128
#An array with a key of “lines” containing pack_size, available_quantity, batch, expiry_date, sell_price
        '403':
          description: Forbidden
        '404':
          description: User not found

  '/users/{username}': # path parameter in curly braces

    # parameters list that are used with each operation for this path
    parameters:
      - name: pretty_print
        in: query
        description: Pretty print response
        schema:
          type: boolean
    get: # documentation for GET operation for this path
      tags:
        - User
      
      # summary is up to 120 symbold but we recommend to be shortest as possible
      summary: Get user by user name
      
      # you can use GFM in operation description too: https://guides.github.com/features/mastering-markdown
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      
      # operationId should be unique across the whole specification
      operationId: getUserByName
      
      # list of parameters for the operation
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
        - name: with_email
          in: query
          description: Filter users without email
          schema:
            type: boolean
      
      # security schemas applied to this operation
      security:
        - basic_auth:
            - 'read:users' # for auth2 provide list of scopes here
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/User'
              example: # response example
                username: user1
                email: user@example.com
        '403':
          description: Forbidden
        '404':
          description: User not found
    # documentation for PUT operation for this path
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be updated
          required: true
          schema:
            type: string
      security:
        - basic_auth:
            - 'write:users'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      # request body documentation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
  /echo: # path parameter in curly braces
    post: # documentation for POST operation for this path
      tags:
        - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      security:
        - basic_auth: []
      responses:
        '200':
          description: OK
          # document headers for this response
          headers:
            X-Rate-Limit: # Header name
              description: calls per hour allowed by the user
              schema: # Header schema
                type: integer
                format: int32
            X-Expires-After:
              $ref: '#/components/headers/ExpiresAfter'
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: Hello world!
            application/xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: Hello world!
          application/xml:
            schema:
              type: string
              example: Hello world!
        description: Echo payload
        required: true
        
# An object to hold reusable parts that can be used across the spec
components:
  schemas:
    Email:
      description: User email address
      type: string
      format: test
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
  # Security scheme definitions that can be used across the specification.
  securitySchemes:
    basic_auth: # security definition name (you can name it as you want)
      type: http
      scheme: basic
